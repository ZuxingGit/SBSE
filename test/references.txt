[1] Replication package: scripts, n-grams, and graph data. https://github.com/CESEL/CodeEntropyReplication, 2017.
[2] M. Allamanis and C. Sutton. Mining source code repositories at massive scale using language modeling. In Proceedings of the 10th Working Conference on Mining Software Repositories, MSR ’13, pages 207–216, Piscataway, NJ, USA, 2013. IEEE Press.
[3] D. L. Atkins. Version sensitive editing: Change history as a programming tool. In B. Magnusson, editor, SCM, volume 1439 of Lecture Notes in Computer Science, pages 146–157. Springer, 1998.
[4] S. Azad, P. C. Rigby, and L. Guerrouj. Generating API Call Rules from Version History and Stack Overflow Posts. ACM Trans. Softw. Eng. Methodol., 25(4):29:1–29:22, Jan. 2017.
[5] G. Baxter, M. Frean, J. Noble, M. Rickerby, H. Smith, M. Visser, H. Melton, and E. Tempero. Understanding the shape of java software. In Proceedings of the 21st Annual ACM SIGPLAN Conference on Object-oriented Programming Systems, Languages, and Applications, OOPSLA ’06, pages 397–412, New York, NY, USA, 2006. ACM.
[6] M. Bruch, M. Monperrus, and M. Mezini. Learning from Examples to Improve Code Completion Systems. In Proceedings of the the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering, ESEC/FSE ’09, pages 213–222, New York, NY, USA, 2009. ACM.
[7] R. P. L. Buse and W. Weimer. Synthesizing api usage examples. In Proceedings of the 20th International Conference on Software Engineering, pages 782–792, 2012.
[8] T. Busjahn, R. Bednarik, A. Begel, M. Crosby, J. H. Paterson, C. Schulte, B. Sharif, and S. Tamm. Eye movements in code reading: Relaxing the linear order. In 2015 IEEE 23rd International Conference on Program Comprehension, pages 255–265, May 2015.
[9] J. C. Campbell, A. Hindle, and J. N. Amaral. Syntax errors just aren’t natural: Improving error reporting with language models. In Proceedings of the 11th Working Conference on Mining Software Repositories, MSR 2014, pages 252–261, New York, NY, USA, 2014. ACM.
[10] C. Casalnuovo, K. Sagae, and P. T. Devanbu. Studying the difference between natural and programming language corpora. arXiv, 2018.
[11] A. Chen, E. Chou, J. Wong, A. Y. Yao, Q. Zhang, S. Zhang, and A. Michail. Cvssearch: Searching through source code using cvs comments. In ICSM, pages 364–, 2001.
[12] G. Concas, M. Marchesi, S. Pinna, and N. Serra. Power- laws in a large object-oriented software system. IEEE Transactions on Software Engineering, 33(10):687–708, Oct 2007.
[13] M. E. Crosby, J. Scholtz, and S. Wiedenbeck. The roles beacons play in comprehension for novice and expert programmers. In 14th Workshop of the Psychology of Programming Interest Group, pages 58–73, 2002.
[14] M. E. Crosby and J. Stelovsky. How do we read algorithms? a case study. Computer, 23(1):25–35, Jan 1990.
[15] B. Dagenais and L. Hendren. Enabling static analysis for partial java programs. SIGPLAN Not., 43(10):313–328, Oct. 2008.
[16] E. Duala-Ekoko and M. Robillard. Using structure- based recommendations to facilitate discoverability in apis. In M. Mezini, editor, ECOOP 2011 – Object-Oriented Programming, volume 6813 of Lecture Notes in Computer Science, pages 79–104. Springer Berlin Heidelberg, 2011.
[17] M. Gabel and Z. Su. A study of the uniqueness of source code. In Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE ’10, pages 147–156, New York, NY, USA, 2010. ACM.
[18] J. Gosling, B. Joy, G. Steele, G. Bracha, and A. Buckley. The java language specification: Java se7 edition, 2013.
[19] X. Gu, H. Zhang, D. Zhang, and S. Kim. Deep api learning. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016, pages 631–642. ACM, 2016.
[20] V. J. Hellendoorn and P. Devanbu. Are deep neural networks the best choice for modeling source code? In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2017, pages 763–773. ACM, 2017.
[21] A. Hindle, E. T. Barr, Z. Su, M. Gabel, and P. Devanbu. On the naturalness of software. In Proceedings of the 34th International Conference on Software Engineering, ICSE ’12, pages 837–847, Piscataway, NJ, USA, 2012. IEEE Press.
[22] L. Jiang, G. Misherghi, Z. Su, and S. Glondu. Deckard: Scalable and accurate tree-based detection of code clones. In Proceedings of the 29th international conference on Software Engineering, pages 96–105. IEEE Computer Society, 2007.
[23] M. Jimenez, C. Maxime, Y. Le Traon, and M. Papadakis. On the impact of tokenizer and parameters on n-gram based code analysis. In 2018 IEEE International Confer- ence on Software Maintenance and Evolution (ICSME), pages 437–448, Sep. 2018.
[24] K. S. Jones. Natural language processing: a historical review. In Current issues in computational linguistics: in honour of Don Walker, pages 3–16. Springer, 1994.
[25] D. Jurafsky and J. H. Martin. Speech and language processing, volume 3. Pearson London, 2014.
[26] P. Koehn. Statistical machine translation. Cambridge University Press, 2009.
[27] K. A. Kontogiannis, R. DeMori, E. Merlo, M. Galler, and M. Bernstein. Pattern matching for clone and concept detection. Automated Software Engineering, 3(1-2):77– 108, 1996.
[28] S. Lahiri. Complexity of Word Collocation Networks: A Preliminary Structural Analysis. In Proceedings of the Student Research Workshop at the 14th Conference of the European Chapter of the Association for Computational Linguistics, pages 96–105, Gothenburg, Sweden, April 2014. Association for Computational Linguistics.
[29] Y. Lamba, M. Khattar, and A. Sureka. Pravaaha: Mining android applications for discovering api call usage patterns and trends. In Proceedings of the 8th India Software Engineering Conference, pages 10–19. ACM, 2015.
[30] B. Lin, L. Ponzanelli, A. Mocci, G. Bavota, and M. Lanza. On the uniqueness of code redundancies. In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC), pages 121–131, May 2017.
[31] P. Louridas, D. Spinellis, and V. Vlachos. Power laws in software. ACM Trans. Softw. Eng. Methodol., 18(1):2:1– 2:26, Oct. 2008.
[32] A. Ludwig. Recoder Technical Manual, 2001.
[33] A. Michail. Data mining library reuse patterns in user-selected applications. In Proceedings of the 14th IEEE International Conference on Automated Software Engineering, ASE ’99, pages 24–, Washington, DC, USA, 1999. IEEE Computer Society.
[34] E. Millar, D. Shen, J. Liu, and C. Nicholas. Performance and scalability of a large-scale n-gram based information retrieval system. Journal of Digital Information, 1(5), 2006.
[35] A. T. Nguyen and T. N. Nguyen. Graph-based statistical language model for code. In Proceedings of the 37th International Conference on Software Engineering - Volume 1, ICSE ’15, pages 858–868, Piscataway, NJ, USA, 2015. IEEE Press.
[36] H. A. Nguyen, T. T. Nguyen, N. H. Pham, J. M. Al-Kofahi, and T. N. Nguyen. Accurate and efficient structural characteristic feature extraction for clone detection. In FASE, volume 9, pages 440–455. Springer, 2009.
[37] T. Nguyen, P. C. Rigby, A. T. Nguyen, M. Dharani, Palani ano Karanfil, and T. N. Nguyen. Statistical Translation of English Texts to API Code Templates. In Proceedings of the 2018 IEEE International Conference on Software Maintenance and Evolution, ICSME ’18. IEEE Computer Society, 2018.
[38] T. Nguyen, P. C. Rigby, A. T. Nguyen, M. Karanfil, and T. N. Nguyen. T2API: Synthesizing API Code Usage Templates from English Texts with Statistical Translation. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (Formal Demostration Track), FSE 2016, pages 1013–1017. ACM, 2016.
[39] T. T. Nguyen, A. T. Nguyen, H. A. Nguyen, and T. N. Nguyen. A statistical semantic language model for source code. In Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, pages 532–542, New York, NY, USA, 2013. ACM.
[40] T. T. Nguyen, H. A. Nguyen, N. H. Pham, J. M. Al-Kofahi, and T. N. Nguyen. Graph-based mining of multiple object usage patterns. In Proceedings of the the 7th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering, pages 383–392. ACM, 2009.
[41] J. R. Norris. Markov chains. Number 2. Cambridge university press, 1998.
[42] M. Raghothaman, Y. Wei, and Y. Hamadi. Swim: Synthesizing what i mean: Code search and idiomatic snippet synthesis. In Proceedings of the 38th International Conference on Software Engineering, ICSE ’16, pages 357–367, New York, NY, USA, 2016. ACM.
[43] M. Rahman. Analyzing the Predictability of Source Code and its Application in Creating Parallel Corpora for English-to-Code Statistical Machine Translation. In Master’s Thesis at Concordia University, March 2018.
[44] B. Ray, V. Hellendoorn, S. Godhane, Z. Tu, A. Bacchelli, and P. Devanbu. On the ”naturalness” of buggy code. In Proceedings of the 38th International Conference on Software Engineering, ICSE ’16, pages 428–439, New York, NY, USA, 2016. ACM.
[45] B. Ray, M. Nagappan, C. Bird, N. Nagappan, and T. Zim- mermann. The uniqueness of changes: Characteristics and applications. In Proceedings of the 12th Working Conference on Mining Software Repositories, MSR ’15, pages 34–44, Piscataway, NJ, USA, 2015. IEEE Press. 
[46] R. C. Read and D. G. Corneil. The graph isomorphism disease. Journal of Graph Theory, 1(4):339–363, 1977. 
[47] P. C. Rigby and M. P. Robillard. Discovering essential code elements in informal documentation. In Proceed- ings of the 2013 International Conference on Software Engineering, ICSE ’13, pages 832–841, 2013.
[48] R. Robbes and M. Lanza. How program history can improve code completion. In Proceedings of the 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, ASE ’08, pages 317–326, Wash- ington, DC, USA, 2008. IEEE Computer Society.
[49] P. Rodeghero, C. McMillan, P. W. McBurney, N. Bosch, and S. D’Mello. Improving automated source code summarization via an eye-tracking study of programmers. In Proceedings of the 36th International Conference on Software Engineering, ICSE 2014, pages 390–401, New York, NY, USA, 2014. ACM.
[50] G. Salton and M. J. McGill. Readings in information retrieval. chapter The SMART and SIRE Experimental Retrieval Systems, pages 381–399. Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 1997.
[51] E. A. Santos and A. Hindle. Judging a commit by its cover: Correlating commit message entropy with build status on travis-ci. In Proceedings of the 13th International Conference on Mining Software Repositories, MSR ’16, pages 504–507, New York, NY, USA, 2016. ACM.
[52] C. E. Shannon. Prediction and entropy of printed english. Bell Labs Technical Journal, 30(1):50–64, 1951.
[53] Z. Tu, Z. Su, and P. Devanbu. On the localness of software. In Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2014, pages 269–280, New York, NY, USA, 2014. ACM. 
[54] J. R. Ullmann. An algorithm for subgraph isomorphism. Journal of the ACM (JACM), 23(1):31–42, 1976.
[55] M. White, C. Vendome, M. Linares-Va ́squez, and D. Poshyvanyk. Toward deep learning software reposito- ries. In Proceedings of the 12th Working Conference on Mining Software Repositories, MSR ’15, pages 334–345, Piscataway, NJ, USA, 2015. IEEE Press.
[56] H. Zhang. Exploring regularity in source code: Software science and zipf’s law. In 2008 15th Working Conference on Reverse Engineering, pages 101–110, Oct 2008.
[57] Y. F. Zhang, Q. F. Zhang, and R. H. Yu. Markov property of markov chains and its test. In 2010 International Con- ference on Machine Learning and Cybernetics, volume 4, pages 1864–1867, July 2010.
[58] T. Zimmermann, P. Weißgerber, S. Diehl, and A. Zeller. Mining version histories to guide software changes. IEEE Transactions on Software Engineering, 31(6):429–445, June 2005.